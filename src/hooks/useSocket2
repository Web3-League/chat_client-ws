// src/hooks/useSocket2.js
import { useState, useEffect, useCallback } from 'react';
import { io } from 'socket.io-client';
import { useAuth } from '../context/AuthContext';

const useSocket2 = () => {
  const { token, user } = useAuth();
  const [socket, setSocket] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [messages, setMessages] = useState([]);
  const [typingUsers, setTypingUsers] = useState([]);
  
  const typingTimeouts = {};

  useEffect(() => {
    if (token) {
      const isLocalhost = window.location.hostname === 'localhost';
      const socketUrl = isLocalhost ? 'http://localhost:3000' : 'http://192.168.1.16:3000';
      const newSocket = io(socketUrl, {
        auth: { token },
        transports: ['websocket', 'polling'],
        secure: true,
        reconnectionAttempts: Infinity,
        reconnectionDelay: 1000,
        reconnectionDelayMax: 5000,
        timeout: 20000,
        rejectUnauthorized: false,
      });

      newSocket.on('connect', () => {
        setIsConnected(true);
        console.log('Connected to server');
      });

      newSocket.on('disconnect', () => {
        setIsConnected(false);
        console.log('Disconnected from server');
      });

      newSocket.on('connect_error', (error) => {
        console.error('Connection error:', error);
      });

      newSocket.on('message', (message) => {
        setMessages((prevMessages) => [...prevMessages, message]);
      });

      newSocket.on('user_typing', (data) => {
        setTypingUsers((prevTypingUsers) => {
          if (!prevTypingUsers.includes(data.username)) {
            return [...prevTypingUsers, data.username];
          }
          return prevTypingUsers;
        });

        if (typingTimeouts[data.username]) {
          clearTimeout(typingTimeouts[data.username]);
        }

        typingTimeouts[data.username] = setTimeout(() => {
          setTypingUsers((prevTypingUsers) => prevTypingUsers.filter((user) => user !== data.username));
        }, 3000); // Stop displaying typing after 3 seconds
      });

      newSocket.on('messages', (messages) => {
        console.log('Received messages:', messages); // Debug log
        setMessages(messages);
      });

      setSocket(newSocket);

      return () => {
        newSocket.disconnect();
      };
    }
  }, [token]);

  const fetchMessages = useCallback((channelId) => {
    if (socket) {
      console.log('Emitting get_messages event for channelId:', channelId);
      socket.emit('get_messages', { channelId });
    }
  });

  const joinChannel = useCallback((channelId) => {
    if (socket) {
      socket.emit('joinChannel', { channelId });
    }
  });

  const leaveChannel = useCallback((channelId) => {
    if (socket) {
      socket.emit('leaveChannel', { channelId });
    }
  });

  const sendMessage = useCallback((channelId, text) => {
    if (socket && user) {
      socket.emit('send_message', { userId: user.id, text, channelId });
    }
  });

  const startTyping = useCallback((channelId) => {
    if (socket && user) {
      socket.emit('typing', { username: user.username, channelId });

      if (typingTimeouts[user.username]) {
        clearTimeout(typingTimeouts[user.username]);
      }

      typingTimeouts[user.username] = setTimeout(() => {
        setTypingUsers((prevTypingUsers) => prevTypingUsers.filter((user) => user !== user.username));
      }, 3000); // Automatically stop typing after 3 seconds
    }
  });

  return {
    socket,
    isConnected,
    messages,
    typingUsers,
    joinChannel,
    leaveChannel,
    sendMessage,
    startTyping,
    fetchMessages,
  };
};

export default useSocket2;

